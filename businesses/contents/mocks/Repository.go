// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	contents "mini-cms-api/businesses/contents"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: contentReq
func (_m *Repository) Create(contentReq *contents.Domain) (contents.Domain, error) {
	ret := _m.Called(contentReq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 contents.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(*contents.Domain) (contents.Domain, error)); ok {
		return rf(contentReq)
	}
	if rf, ok := ret.Get(0).(func(*contents.Domain) contents.Domain); ok {
		r0 = rf(contentReq)
	} else {
		r0 = ret.Get(0).(contents.Domain)
	}

	if rf, ok := ret.Get(1).(func(*contents.Domain) error); ok {
		r1 = rf(contentReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]contents.Domain, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []contents.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]contents.Domain, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []contents.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contents.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id string) (contents.Domain, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 contents.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (contents.Domain, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) contents.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(contents.Domain)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: contentReq, id
func (_m *Repository) Update(contentReq *contents.Domain, id string) (contents.Domain, error) {
	ret := _m.Called(contentReq, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 contents.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(*contents.Domain, string) (contents.Domain, error)); ok {
		return rf(contentReq, id)
	}
	if rf, ok := ret.Get(0).(func(*contents.Domain, string) contents.Domain); ok {
		r0 = rf(contentReq, id)
	} else {
		r0 = ret.Get(0).(contents.Domain)
	}

	if rf, ok := ret.Get(1).(func(*contents.Domain, string) error); ok {
		r1 = rf(contentReq, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
